#!/bin/bash

base=$(dirname $0)
source $base/config.sh
source $base/common.sh

service=""
module=""
pkg=""
taskid=""

while getopts s:m:p:i:h: opt; do
    case $opt in
        s) service=$OPTARG;;
        m) module=$OPTARG;;
        p) pkg=$OPTARG;;
        i) taskid=$OPTARG;;
        h) help;;
    esac
done

function help() {
    cat <<EOF
功能说明: 构建代码镜像
使用方法: $0 -s 服务名 -m 模块名 -p 包名 -i 任务id
EOF
    exit 0
}

function check() {
    if [ -z $service ]; then
        help
    fi

    if [ -z $module ]; then
        help
    fi

    if [ -z $lang ]; then
        help
    fi

    if [ -z $addr ]; then
        help
    fi

    if [ -z $tag ]; then
        help
    fi

    if [ -z $taskid ]; then
        help
    fi

    # 代码路径不存在则创建
    if [ ! -d $CODE_PATH ]; then
        mkdir -p $CODE_PATH
    fi
}

function checkout_tag() {
    build_path=$1
    cd $build_path

    if [ -d $module ]; then
        rm -rf $module
    fi
    git clone --recursive $addr $module -q
    echo "代码下载完成!"

    cd $module
    git checkout $tag -q
    if [ $? -ne 0 ]; then
        echoerror "切换到tag: $tag 失败!"
        exit $err
    fi
    echo "模块($module) 切换到tag($tag) 成功"
}

function compile() {
    build_path=$1

    rm -rf .git .gitignore
    echo "删除隐藏文件成功"

    if [ $lang == "go" ]; then
        echo "模块$module开始进行golang编译"

    elif [ $lang == "java" ]; then
        echo "模块$module开始进行maven编译"

    else
        echo "模块$module跳过该编译阶段"
    fi

    cd $build_path
    echo "拷贝编译好的代码到代码路径成功"
}

function create_dockerfile() {
    build_path=$1
    dockerfile="$build_path/Dockerfile"

	cat << EOF > $dockerfile
FROM alpine:3.7

ARG module

CMD mkdir -p /code
ADD ./\${module} /code/\${module}
EOF
    echo "生成Dockerfile: $dockerfile 成功"
}

function build_image() {
    build_path=$1

    image_url="$CODE_REGISTRY/$module"
    image_tag="v-$(date +%Y%m%d_%H%M%S)"
    release_url="$image_url:$image_tag"

    # docker build --build-arg module=模块 -t code镜像:版本 dockerfile路径
    echo "docker build --build-arg module=$module -t $release_url $build_path"
    docker build --build-arg module=$module -t $release_url $build_path
    if [ $? -ne 0 ]; then
        echoerror "docker build失败!"
        exit $err
    fi

    echo "docker tag $release_url $release_url"
    docker tag $release_url $release_url
    if [ $? -ne 0 ]; then
        echoerror "docker tag失败!"
        exit $err
    fi

    echo "docker push $release_url"
    docker push $release_url
    if [ $? -ne 0 ]; then
        echoerror "docker push失败!"
        exit $err
    fi

    echobold "上报镜像信息"
    report_img $taskid $module $image_url $image_tag
    echobold "镜像构建完成, 镜像: $release_url"
}

function main() {
    check
 
    build_path="$IMAGE_PATH/$service/$taskid" # 构建路径: release路径/服务/上线单ID
    if [ -d $build_path ]; then
        rm -rf $build_path
    fi
        mkdir -p $build_path
    echo "创建构建路径: $build_path 成功"

    echobold "阶段一: 模块$module下载tag:$tag代码"
    checkout_tag $build_path

    echobold "阶段二: 模块$module进行编译"
    compile $build_path $build_path

    echobold "阶段三: 模块$module创建Dockerfile"
    create_dockerfile $build_path

    echobold "阶段三: 模块$module进行镜像构建"
    build_image $build_path
}

main
