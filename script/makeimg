#!/bin/bash

base=$(dirname $0)
source $base/config.sh
source $base/common.sh

service=""
module=""
pkg=""
taskid=""

while getopts s:m:p:i:h: opt; do
    case $opt in
        s) service=$OPTARG;;
        m) module=$OPTARG;;
        p) pkg=$OPTARG;;
        i) taskid=$OPTARG;;
        h) help;;
    esac
done

function help() {
    cat <<EOF
功能说明: 构建代码镜像
使用方法: $0 -s 服务名 -m 模块名 -p 包名 -i 任务id
EOF
    exit 0
}

function check() {
    if [ -z $service ]; then
        help
    fi

    if [ -z $module ]; then
        help
    fi

    if [ -z $pkg ]; then
        help
    fi

    if [ -z $taskid ]; then
        help
    fi
}

function untar() {
    build_path=$1

    cd $build_path
    tar zxf $pkg
    echo "解压编译包: $pkg 成功"
}

function create_dockerfile() {
    build_path=$1
    dockerfile="$build_path/Dockerfile"

	cat << EOF > $dockerfile
FROM alpine:3.7

ARG module

CMD mkdir -p /code
ADD ./\${module} /code/\${module}
EOF
    echo "生成Dockerfile: $dockerfile 成功"
}

function build_image() {
    build_path=$1

    image_url="$IMAGE_REGISTRY/$module"
    image_tag="v-$(date +%Y%m%d_%H%M%S)"
    release_url="$image_url:$image_tag"

    # docker build --build-arg module=模块 -t code镜像:版本 dockerfile路径
    echo "docker build --build-arg module=$module -t $release_url $build_path"
    docker build --build-arg module=$module -t $release_url $build_path
    if [ $? -ne 0 ]; then
        echoerror "docker build失败!"
        exit $err
    fi

    echo "docker tag $release_url $release_url"
    docker tag $release_url $release_url
    if [ $? -ne 0 ]; then
        echoerror "docker tag失败!"
        exit $err
    fi

    echo "docker push $release_url"
    docker push $release_url
    if [ $? -ne 0 ]; then
        echoerror "docker push失败!"
        exit $err
    fi

    echobold "上报镜像信息"
    report_img $taskid $module $image_url $image_tag
    echobold "镜像构建完成, 镜像: $release_url"
}

function clear_module() {
    build_path=$1

    cd $build_path
    if [ -d $module ]; then
        rm -rf $module
    fi

    echo "镜像模块清理完成"
}

function main() {
    check
 
    build_path="$IMAGE_PATH/$service/$taskid" # 构建路径: release路径/服务/上线单ID
    if [ ! -d $build_path ]; then
        mkdir -p $build_path
    fi
    echo "创建构建路径: $build_path 成功"

    echobold "阶段一: 解压$module编译包"
    untar $build_path

    echobold "阶段二: 模块$module创建Dockerfile"
    create_dockerfile $build_path

    echobold "阶段三: 模块$module进行镜像构建"
    build_image $build_path

    echobold "阶段四: 模块$module进行清理"
    clear_module $build_path
}

main
